<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Car - Admin Dashboard</title>
    <link href="/css/output.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <div class="flex justify-between items-center">
                <h1 class="text-3xl font-bold text-gray-800">Edit Car</h1>
                <a href="/admin" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
                    Back to Dashboard
                </a>
            </div>
        </div>

        <!-- Success Message -->
        <% if (success) { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
                <%= success %>
            </div>
        <% } %>

        <!-- Error Message -->
        <% if (error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <%= error %>
            </div>
        <% } %>

        <!-- Edit Car Form -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <form method="POST" action="/admin/edit-car/<%= car.id %>" enctype="multipart/form-data" class="space-y-6">
                <!-- Basic Information -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-2">Car Title *</label>
                        <input type="text" id="title" name="title" required value="<%= car.title %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="e.g., 2020 Honda Civic LX">
                    </div>
                    
                    <div>
                        <label for="vin" class="block text-sm font-medium text-gray-700 mb-2">VIN *</label>
                        <input type="text" id="vin" name="vin" required value="<%= car.vin %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="17-character VIN">
                    </div>
                </div>

                <!-- Car Details -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                        <label for="year" class="block text-sm font-medium text-gray-700 mb-2">Year *</label>
                        <input type="number" id="year" name="year" required min="1900" max="2030" value="<%= car.year %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="2020">
                    </div>
                    
                    <div>
                        <label for="make" class="block text-sm font-medium text-gray-700 mb-2">Make *</label>
                        <input type="text" id="make" name="make" required value="<%= car.make %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Honda">
                    </div>
                    
                    <div>
                        <label for="model" class="block text-sm font-medium text-gray-700 mb-2">Model *</label>
                        <input type="text" id="model" name="model" required value="<%= car.model %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Civic">
                    </div>
                </div>

                <!-- Price and Mileage -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="price" class="block text-sm font-medium text-gray-700 mb-2">Price ($) *</label>
                        <input type="number" id="price" name="price" required min="0" value="<%= car.price %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="25000">
                    </div>
                    
                    <div>
                        <label for="mileage" class="block text-sm font-medium text-gray-700 mb-2">Mileage *</label>
                        <input type="number" id="mileage" name="mileage" required min="0" value="<%= car.mileage %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="50000">
                    </div>
                </div>

                <!-- Engine and Transmission -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="engine" class="block text-sm font-medium text-gray-700 mb-2">Engine</label>
                        <input type="text" id="engine" name="engine" value="<%= car.engine || '' %>"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="2.0L 4-Cylinder">
                    </div>
                    
                    <div>
                        <label for="transmission" class="block text-sm font-medium text-gray-700 mb-2">Transmission</label>
                        <select id="transmission" name="transmission" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">Select Transmission</option>
                            <option value="Automatic" <%= car.transmission === 'Automatic' ? 'selected' : '' %>>Automatic</option>
                            <option value="Manual" <%= car.transmission === 'Manual' ? 'selected' : '' %>>Manual</option>
                            <option value="CVT" <%= car.transmission === 'CVT' ? 'selected' : '' %>>CVT</option>
                        </select>
                    </div>
                </div>

                <!-- Features -->
                <div>
                    <label for="features" class="block text-sm font-medium text-gray-700 mb-2">Features</label>
                    <textarea id="features" name="features" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="List key features separated by commas"><%= car.features || '' %></textarea>
                </div>

                <!-- Current Images -->
                <% if (images && images.length > 0) { %>
                <div class="space-y-4">
                    <h3 class="text-lg font-medium text-gray-800">Current Images</h3>
                    <p class="text-sm text-gray-600">ðŸ’¡ Drag and drop images to reorder them. The first image automatically becomes the primary image shown on listings.</p>
                    <div id="imageContainer" class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <% images.forEach(function(image) { %>
                        <div class="relative group cursor-move" draggable="true" data-image-id="<%= image.id %>">
                            <img src="<%= image.image_url %>" alt="Car image" 
                                 class="w-full h-32 object-cover rounded-lg border border-gray-300 transition-all duration-200">
                            
                            <!-- Primary badge -->
                            <% if (image.display_order === 1) { %>
                            <div class="absolute top-2 left-2 bg-green-600 text-white text-xs px-2 py-1 rounded">
                                <i class="fas fa-star"></i> Primary
                            </div>
                            <% } else { %>
                            <div class="absolute top-2 left-2 bg-gray-600 text-white text-xs px-2 py-1 rounded">
                                #<%= image.display_order %>
                            </div>
                            <% } %>
                            
                            <!-- Action buttons -->
                            <div class="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity space-x-1">
                                <form method="POST" action="/admin/delete-image/<%= image.id %>" class="inline" 
                                      onsubmit="return confirm('Are you sure you want to delete this image?')">
                                    <input type="hidden" name="carId" value="<%= car.id %>">
                                    <button type="submit" class="bg-red-600 text-white text-xs px-2 py-1 rounded hover:bg-red-700">
                                        Delete
                                    </button>
                                </form>
                            </div>
                        </div>
                        <% }); %>
                    </div>
                </div>
                <% } %>

                <!-- Add New Images -->
                <div class="space-y-4">
                    <h3 class="text-lg font-medium text-gray-800">Add New Images</h3>
                    <div>
                        <label for="images" class="block text-sm font-medium text-gray-700 mb-2">Upload Additional Images</label>
                        <input type="file" id="images" name="images" multiple accept="image/jpeg,image/jpg,image/png,image/webp" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                        <p class="text-xs text-gray-500 mt-1">Select multiple images (JPEG, PNG, WebP). Max 5MB per image.</p>
                    </div>
                    
                    <div id="imagePreview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4 hidden">
                        <!-- Preview images will be inserted here -->
                    </div>
                </div>

                <!-- Carfax URL -->
                <div>
                    <label for="carfax_url" class="block text-sm font-medium text-gray-700 mb-2">Carfax URL</label>
                    <input type="url" id="carfax_url" name="carfax_url" value="<%= car.carfax_url || '' %>"
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                           placeholder="https://www.carfax.com/... (optional - will show 'Coming Soon' if not provided)">
                    <p class="text-xs text-gray-500 mt-1">Leave empty if Carfax report is not yet available</p>
                </div>

                <!-- Options -->
                <div class="flex items-center space-x-6">
                    <label class="flex items-center">
                        <input type="checkbox" id="is_featured" name="is_featured" value="1" <%= car.is_featured ? 'checked' : '' %>
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                        <span class="ml-2 text-sm text-gray-700">Featured Car</span>
                    </label>
                    
                    <label class="flex items-center">
                        <input type="checkbox" id="sold" name="sold" value="1" <%= car.sold ? 'checked' : '' %>
                               class="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded">
                        <span class="ml-2 text-sm text-gray-700">Mark as Sold</span>
                    </label>
                </div>

                <!-- Submit Button -->
                <div class="flex justify-end space-x-4">
                    <a href="/admin" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                        Cancel
                    </a>
                    <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Update Car
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Form submission debugging
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - Starting form debugging');
            
            const form = document.querySelector('form[method="POST"]');
            const submitButton = document.querySelector('button[type="submit"]');
            
            console.log('Form found:', !!form);
            console.log('Submit button found:', !!submitButton);
            
            if (form && submitButton) {
                console.log('Adding event listeners to form and button');
                // Add submit listener for validation debugging
                form.addEventListener('submit', function(e) {
                    if (!form.checkValidity()) {
                        console.log('Form invalid - preventing submission');
                        console.log('Invalid fields:', Array.from(form.elements).filter(el => !el.checkValidity()).map(el => ({name: el.name, validationMessage: el.validationMessage})));
                        form.reportValidity();
                        e.preventDefault();
                        return;
                    }
                    console.log('Form valid - submitting');
                });
                
                // Removed custom click handler to allow native submission
                
                // Removed debugging submit handler to restore normal submission
                
                // Add additional debugging for button interactions
                submitButton.addEventListener('mousedown', function(e) {
                    console.log('Button mousedown event');
                });
                
                submitButton.addEventListener('mouseup', function(e) {
                    console.log('Button mouseup event');
                });
                
                // Check if button is actually clickable
                console.log('Button initial state:');
                console.log('- Disabled:', submitButton.disabled);
                console.log('- Pointer events:', window.getComputedStyle(submitButton).pointerEvents);
                console.log('- Z-index:', window.getComputedStyle(submitButton).zIndex);
                console.log('- Position:', window.getComputedStyle(submitButton).position);
            } else {
                console.error('Form or submit button not found!');
                if (!form) console.error('Form element missing');
                if (!submitButton) console.error('Submit button element missing');
            }
        });
        
        // Add global error handler
        window.addEventListener('error', function(e) {
            console.error('JavaScript error:', e.error);
            console.error('Error message:', e.message);
            console.error('Error source:', e.filename + ':' + e.lineno);
        });
        
        // Global click listener for debugging
        document.addEventListener('click', function(e) {
            console.log('Global click captured on:', e.target);
            console.log('Target tag:', e.target.tagName);
            console.log('Target class:', e.target.className);
            console.log('Target id:', e.target.id);
            console.log('Event phase:', e.eventPhase);
        }, true); // Capture phase
        
        // Image preview functionality
        document.getElementById('images').addEventListener('change', function(e) {
            const files = e.target.files;
            const previewContainer = document.getElementById('imagePreview');
            
            // Clear previous previews
            previewContainer.innerHTML = '';
            
            if (files.length === 0) {
                previewContainer.classList.add('hidden');
                return;
            }
            
            previewContainer.classList.remove('hidden');
            
            Array.from(files).forEach((file, index) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const previewDiv = document.createElement('div');
                    previewDiv.className = 'relative';
                    
                    const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                    
                    previewDiv.innerHTML = `
                        <img src="${e.target.result}" alt="Preview" 
                             class="w-full h-32 object-cover rounded-lg border border-gray-300">
                        <div class="absolute top-2 left-2 bg-blue-600 text-white text-xs px-2 py-1 rounded">
                            New #${index + 1}
                        </div>
                        <div class="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                            ${sizeInMB}MB
                        </div>
                    `;
                    
                    previewContainer.appendChild(previewDiv);
                };
                
                reader.readAsDataURL(file);
            });
        });
        
        // Drag and drop functionality for image reordering
        const imageContainer = document.getElementById('imageContainer');
        if (imageContainer) {
            let draggedElement = null;
            
            // Add event listeners to all draggable image elements
            const imageElements = imageContainer.querySelectorAll('[draggable="true"]');
            
            imageElements.forEach(element => {
                element.addEventListener('dragstart', function(e) {
                    draggedElement = this;
                    this.style.opacity = '0.5';
                    e.dataTransfer.effectAllowed = 'move';
                });
                
                element.addEventListener('dragend', function(e) {
                    this.style.opacity = '1';
                    draggedElement = null;
                });
                
                element.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';
                });
                
                element.addEventListener('drop', function(e) {
                    e.preventDefault();
                    if (draggedElement && draggedElement !== this) {
                        // Get all image elements
                        const allImages = Array.from(imageContainer.children);
                        const draggedIndex = allImages.indexOf(draggedElement);
                        const targetIndex = allImages.indexOf(this);
                        
                        // Reorder in DOM
                        if (draggedIndex < targetIndex) {
                            this.parentNode.insertBefore(draggedElement, this.nextSibling);
                        } else {
                            this.parentNode.insertBefore(draggedElement, this);
                        }
                        
                        // Update display order in backend
                        updateImageOrder();
                    }
                });
            });
            
            function updateImageOrder() {
                const imageElements = imageContainer.querySelectorAll('[data-image-id]');
                const updates = [];
                
                imageElements.forEach((element, index) => {
                    const imageId = element.getAttribute('data-image-id');
                    updates.push({
                        imageId: imageId,
                        displayOrder: index + 1
                    });
                });
                
                // Send batch update to server
                fetch('/admin/update-images-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ updates: updates })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Image order updated successfully');
                        // Update display order badges
                        updateDisplayOrderBadges();
                    } else {
                        console.error('Failed to update image order');
                    }
                })
                .catch(error => {
                    console.error('Error updating image order:', error);
                });
            }
            
            function updateDisplayOrderBadges() {
                const imageElements = imageContainer.querySelectorAll('[data-image-id]');
                imageElements.forEach((element, index) => {
                    const badge = element.querySelector('.absolute.top-2.left-2 > div, .bg-gray-600, .bg-green-600');
                    if (badge) {
                        if (index === 0) {
                            // First image becomes primary
                            badge.className = 'absolute top-2 left-2 bg-green-600 text-white text-xs px-2 py-1 rounded';
                            badge.innerHTML = '<i class="fas fa-star"></i> Primary';
                        } else {
                            // Other images show order number
                            badge.className = 'absolute top-2 left-2 bg-gray-600 text-white text-xs px-2 py-1 rounded';
                            badge.textContent = `#${index + 1}`;
                        }
                    }
                });
            }
        }
    </script>
</body>
</html>